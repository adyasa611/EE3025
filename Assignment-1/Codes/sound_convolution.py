# -*- coding: utf-8 -*-
"""IDP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SKpTp1UvYa6B4veG5iWHOXKA8NeeLxI7
"""

import numpy as np
import soundfile as sf
from scipy import signal
import matplotlib.pyplot as plt
#If using termux
import subprocess
import shlex
#end if
from scipy import array, zeros, signal
from scipy.fftpack import fft, ifft, convolve

x,fs = sf.read('Sound_Noise.wav')
l = len(x)
y = np.zeros(l)
samp_freq = fs
order = 4
cutoff_freq = 4000.0
Wn = 2*cutoff_freq/samp_freq
b,a = signal.butter(order,Wn,'low')

h = np.zeros(l)
h[0] = (b[0]/a[0])
h[1] = (1/a[0])*(b[1]-a[1]*h[0])
h[2] = (1/a[0])*(b[2]-a[1]*h[1]-a[2]*h[0])
h[3] = (1/a[0])*(b[3]-a[1]*h[2]-a[2]*h[1]-a[3]*h[0])
h[4] = (1/a[0])*(b[4]-a[1]*h[3]-a[2]*h[2]-a[3]*h[1]-a[4]*h[0])
for i in range(5,l):
	h[i] = (1/a[0])*(-a[1]*h[i-1]-a[2]*h[i-2]-a[3]*h[i-3]-a[4]*h[i-4])
y = np.zeros(l)

y = np.real(np.fft.ifft( np.fft.fft(x)*np.fft.fft(h)))
y = y.astype("float")


sf.write('Sound_convolution.wav',y,fs)
#subplots
plt.plot(y)
plt.title('Output signal')
plt.xlabel('$n$')
plt.ylabel('$y(n)$')
plt.grid()# minor

#If using termux
plt.savefig('../Figures/yn_convolution.pdf')
plt.savefig('../Figures/yn_convolution.eps')
subprocess.run(shlex.split("termux-open ../Figures/yn_conv.pdf"))
#else
#plt.show()

from google.colab import drive
drive.mount('/content/drive')